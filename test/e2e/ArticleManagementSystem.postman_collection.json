{
  "info": {
    "_postman_id": "6bed5be9-50ae-425a-b445-530b0821831c",
    "name": "ArticleManagementSystem",
    "description": "Collection of tests for the article management system API.\n\n[https://github.com/nathanbizkit/article-management-go](https://github.com/nathanbizkit/article-management-go)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "1971676"
  },
  "item": [
    {
      "name": "Auth",
      "item": [
        {
          "name": "Register",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Auth cookie is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "    pm.expect(pm.cookies.has('session')).to.be.true",
                  "    pm.expect(pm.cookies.has('refreshToken')).to.be.true",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{USERNAME}}\",\n    \"email\": \"{{EMAIL}}\",\n    \"password\": \"{{PASSWORD}}\",\n    \"name\": \"{{NAME}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{APIURL}}/register",
              "host": ["{{APIURL}}"],
              "path": ["register"]
            }
          },
          "response": []
        },
        {
          "name": "Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Auth cookie is present\", () => {",
                  "    pm.response.to.have.status(204)",
                  "    pm.expect(pm.cookies.has('session')).to.be.true",
                  "    pm.expect(pm.cookies.has('refreshToken')).to.be.true",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [""],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{EMAIL}}\",\n    \"password\": \"{{PASSWORD}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{APIURL}}/login",
              "host": ["{{APIURL}}"],
              "path": ["login"]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Auth cookie is present\", () => {",
                  "    pm.response.to.have.status(204)",
                  "    pm.expect(pm.cookies.has('session')).to.be.true",
                  "    pm.expect(pm.cookies.has('refreshToken')).to.be.true",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/refresh_token",
              "host": ["{{APIURL}}"],
              "path": ["refresh_token"]
            }
          },
          "response": []
        },
        {
          "name": "Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User profile is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('username')",
                  "    pm.expect(jsonData.username).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('name')",
                  "    pm.expect(jsonData.name).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('bio')",
                  "    pm.expect(jsonData.bio).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('image')",
                  "    pm.expect(jsonData.image).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('following')",
                  "    pm.expect(jsonData.following).to.be.a('boolean')",
                  "    pm.expect(jsonData.following).to.equal(false)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/me",
              "host": ["{{APIURL}}"],
              "path": ["me"]
            }
          },
          "response": []
        },
        {
          "name": "Update Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User profile is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('username')",
                  "    pm.expect(jsonData.username).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('name')",
                  "    pm.expect(jsonData.name).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('bio')",
                  "    pm.expect(jsonData.bio).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('image')",
                  "    pm.expect(jsonData.image).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('following')",
                  "    pm.expect(jsonData.following).to.be.a('boolean')",
                  "    pm.expect(jsonData.following).to.equal(false)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{USERNAME}}\",\n    \"email\": \"{{EMAIL}}\",\n    \"password\": \"{{PASSWORD}}\",\n    \"name\": \"{{NAME}}\",\n    \"bio\": \"{{$randomWords}}\",\n    \"image\": \"{{$randomAvatarImage}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{APIURL}}/me",
              "host": ["{{APIURL}}"],
              "path": ["me"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Profiles",
      "item": [
        {
          "name": "Prepare Data",
          "item": [
            {
              "name": "Register Celeb Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Auth cookie is present\", () => {",
                      "    pm.response.to.have.status(200)",
                      "    pm.expect(pm.cookies.has('session')).to.be.true",
                      "    pm.expect(pm.cookies.has('refreshToken')).to.be.true",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"celeb_{{USERNAME}}\",\n    \"email\": \"celeb_{{EMAIL}}\",\n    \"password\": \"{{PASSWORD}}\",\n    \"name\": \"CELEB {{NAME}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{APIURL}}/register",
                  "host": ["{{APIURL}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Login as Test Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Auth cookie is present\", () => {",
                      "    pm.response.to.have.status(204)",
                      "    pm.expect(pm.cookies.has('session')).to.be.true",
                      "    pm.expect(pm.cookies.has('refreshToken')).to.be.true",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{EMAIL}}\",\n    \"password\": \"{{PASSWORD}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{APIURL}}/login",
                  "host": ["{{APIURL}}"],
                  "path": ["login"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User profile is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('username')",
                  "    pm.expect(jsonData.username).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('name')",
                  "    pm.expect(jsonData.name).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('bio')",
                  "    pm.expect(jsonData.bio).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('image')",
                  "    pm.expect(jsonData.image).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('following')",
                  "    pm.expect(jsonData.following).to.be.a('boolean')",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}",
              "host": ["{{APIURL}}"],
              "path": ["profiles", "celeb_{{USERNAME}}"]
            }
          },
          "response": []
        },
        {
          "name": "Follow User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User profile is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('username')",
                  "    pm.expect(jsonData.username).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('name')",
                  "    pm.expect(jsonData.name).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('bio')",
                  "    pm.expect(jsonData.bio).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('image')",
                  "    pm.expect(jsonData.image).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('following')",
                  "    pm.expect(jsonData.following).to.be.a('boolean')",
                  "    pm.expect(jsonData.following).to.equal(true)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
              "host": ["{{APIURL}}"],
              "path": ["profiles", "celeb_{{USERNAME}}", "follow"]
            }
          },
          "response": []
        },
        {
          "name": "Unfollow User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User profile is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('username')",
                  "    pm.expect(jsonData.username).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('name')",
                  "    pm.expect(jsonData.name).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('bio')",
                  "    pm.expect(jsonData.bio).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('image')",
                  "    pm.expect(jsonData.image).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('following')",
                  "    pm.expect(jsonData.following).to.be.a('boolean')",
                  "    pm.expect(jsonData.following).to.equal(false)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/profiles/celeb_{{USERNAME}}/follow",
              "host": ["{{APIURL}}"],
              "path": ["profiles", "celeb_{{USERNAME}}", "follow"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Articles",
      "item": [
        {
          "name": "Prepare Data",
          "item": [
            {
              "name": "Create Article 1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Article is present\", () => {",
                      "    pm.response.to.have.status(200)",
                      "",
                      "    const jsonData = pm.response.json()",
                      "    pm.expect(jsonData).to.have.property('id')",
                      "    pm.expect(jsonData.id).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('title')",
                      "    pm.expect(jsonData.title).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('description')",
                      "    pm.expect(jsonData.description).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('body')",
                      "    pm.expect(jsonData.body).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('tags')",
                      "    pm.expect(jsonData.tags).to.be.an('array')",
                      "    pm.expect(jsonData).to.have.property('favorited')",
                      "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('favorites_count')",
                      "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('author')",
                      "    pm.expect(jsonData.author).to.be.an('object')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                      "    pm.expect(jsonData.author.username).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                      "    pm.expect(jsonData.author.name).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                      "    pm.expect(jsonData.author.bio).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                      "    pm.expect(jsonData.author.image).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                      "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('created_at')",
                      "    pm.expect(jsonData.created_at).to.be.a('string')",
                      "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "    pm.expect(jsonData).to.have.property('updated_at')",
                      "    pm.expect(jsonData.updated_at).to.be.a('string')",
                      "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "",
                      "    // so we can use it on subsequent requests ",
                      "    pm.collectionVariables.set('ARTICLE_TEST_1_SLUG', jsonData.id)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"{{$randomWords}}\",\n    \"description\": \"{{$randomLoremSentence}}\",\n    \"body\": \"{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\",\n    \"tags\": [\n        \"{{$randomWord}}\",\n        \"{{$randomWord}}\",\n        \"dnd\"\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{APIURL}}/articles",
                  "host": ["{{APIURL}}"],
                  "path": ["articles"]
                }
              },
              "response": []
            },
            {
              "name": "Create Article 2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Article is present\", () => {",
                      "    pm.response.to.have.status(200)",
                      "",
                      "    const jsonData = pm.response.json()",
                      "    pm.expect(jsonData).to.have.property('id')",
                      "    pm.expect(jsonData.id).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('title')",
                      "    pm.expect(jsonData.title).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('description')",
                      "    pm.expect(jsonData.description).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('body')",
                      "    pm.expect(jsonData.body).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('tags')",
                      "    pm.expect(jsonData.tags).to.be.an('array')",
                      "    pm.expect(jsonData).to.have.property('favorited')",
                      "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('favorites_count')",
                      "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('author')",
                      "    pm.expect(jsonData.author).to.be.an('object')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                      "    pm.expect(jsonData.author.username).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                      "    pm.expect(jsonData.author.name).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                      "    pm.expect(jsonData.author.bio).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                      "    pm.expect(jsonData.author.image).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                      "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('created_at')",
                      "    pm.expect(jsonData.created_at).to.be.a('string')",
                      "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "    pm.expect(jsonData).to.have.property('updated_at')",
                      "    pm.expect(jsonData.updated_at).to.be.a('string')",
                      "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "",
                      "    // so we can use it on subsequent requests ",
                      "    pm.collectionVariables.set('ARTICLE_TEST_2_SLUG', jsonData.id)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"{{$randomWords}}\",\n    \"description\": \"{{$randomLoremSentence}}\",\n    \"body\": \"{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\",\n    \"tags\": [\n        \"{{$randomWord}}\",\n        \"{{$randomWord}}\",\n        \"dnd\"\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{APIURL}}/articles",
                  "host": ["{{APIURL}}"],
                  "path": ["articles"]
                }
              },
              "response": []
            },
            {
              "name": "Register News Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Auth cookie is present\", () => {",
                      "    pm.response.to.have.status(200)",
                      "    pm.expect(pm.cookies.has('session')).to.be.true",
                      "    pm.expect(pm.cookies.has('refreshToken')).to.be.true",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"news_{{USERNAME}}\",\n    \"email\": \"news_{{EMAIL}}\",\n    \"password\": \"{{PASSWORD}}\",\n    \"name\": \"NEWS {{NAME}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{APIURL}}/register",
                  "host": ["{{APIURL}}"],
                  "path": ["register"]
                }
              },
              "response": []
            },
            {
              "name": "Login as News Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Auth cookie is present\", () => {",
                      "    pm.response.to.have.status(204)",
                      "    pm.expect(pm.cookies.has('session')).to.be.true",
                      "    pm.expect(pm.cookies.has('refreshToken')).to.be.true",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"news_{{EMAIL}}\",\n    \"password\": \"{{PASSWORD}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{APIURL}}/login",
                  "host": ["{{APIURL}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Create News Article 1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Article is present\", () => {",
                      "    pm.response.to.have.status(200)",
                      "",
                      "    const jsonData = pm.response.json()",
                      "    pm.expect(jsonData).to.have.property('id')",
                      "    pm.expect(jsonData.id).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('title')",
                      "    pm.expect(jsonData.title).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('description')",
                      "    pm.expect(jsonData.description).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('body')",
                      "    pm.expect(jsonData.body).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('tags')",
                      "    pm.expect(jsonData.tags).to.be.an('array')",
                      "    pm.expect(jsonData).to.have.property('favorited')",
                      "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('favorites_count')",
                      "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('author')",
                      "    pm.expect(jsonData.author).to.be.an('object')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                      "    pm.expect(jsonData.author.username).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                      "    pm.expect(jsonData.author.name).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                      "    pm.expect(jsonData.author.bio).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                      "    pm.expect(jsonData.author.image).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                      "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('created_at')",
                      "    pm.expect(jsonData.created_at).to.be.a('string')",
                      "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "    pm.expect(jsonData).to.have.property('updated_at')",
                      "    pm.expect(jsonData.updated_at).to.be.a('string')",
                      "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"{{$randomWords}}\",\n    \"description\": \"{{$randomLoremSentence}}\",\n    \"body\": \"{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\",\n    \"tags\": [\n        \"{{$randomWord}}\",\n        \"{{$randomWord}}\",\n        \"news\"\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{APIURL}}/articles",
                  "host": ["{{APIURL}}"],
                  "path": ["articles"]
                }
              },
              "response": []
            },
            {
              "name": "Create News Article 2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Article is present\", () => {",
                      "    pm.response.to.have.status(200)",
                      "",
                      "    const jsonData = pm.response.json()",
                      "    pm.expect(jsonData).to.have.property('id')",
                      "    pm.expect(jsonData.id).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('title')",
                      "    pm.expect(jsonData.title).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('description')",
                      "    pm.expect(jsonData.description).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('body')",
                      "    pm.expect(jsonData.body).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('tags')",
                      "    pm.expect(jsonData.tags).to.be.an('array')",
                      "    pm.expect(jsonData).to.have.property('favorited')",
                      "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('favorites_count')",
                      "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('author')",
                      "    pm.expect(jsonData.author).to.be.an('object')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                      "    pm.expect(jsonData.author.username).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                      "    pm.expect(jsonData.author.name).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                      "    pm.expect(jsonData.author.bio).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                      "    pm.expect(jsonData.author.image).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                      "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('created_at')",
                      "    pm.expect(jsonData.created_at).to.be.a('string')",
                      "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "    pm.expect(jsonData).to.have.property('updated_at')",
                      "    pm.expect(jsonData.updated_at).to.be.a('string')",
                      "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"{{$randomWords}}\",\n    \"description\": \"{{$randomLoremSentence}}\",\n    \"body\": \"{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\",\n    \"tags\": [\n        \"{{$randomWord}}\",\n        \"{{$randomWord}}\",\n        \"news\"\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{APIURL}}/articles",
                  "host": ["{{APIURL}}"],
                  "path": ["articles"]
                }
              },
              "response": []
            },
            {
              "name": "Create Training Article 1",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Article is present\", () => {",
                      "    pm.response.to.have.status(200)",
                      "",
                      "    const jsonData = pm.response.json()",
                      "    pm.expect(jsonData).to.have.property('id')",
                      "    pm.expect(jsonData.id).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('title')",
                      "    pm.expect(jsonData.title).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('description')",
                      "    pm.expect(jsonData.description).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('body')",
                      "    pm.expect(jsonData.body).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('tags')",
                      "    pm.expect(jsonData.tags).to.be.an('array')",
                      "    pm.expect(jsonData).to.have.property('favorited')",
                      "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('favorites_count')",
                      "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('author')",
                      "    pm.expect(jsonData.author).to.be.an('object')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                      "    pm.expect(jsonData.author.username).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                      "    pm.expect(jsonData.author.name).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                      "    pm.expect(jsonData.author.bio).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                      "    pm.expect(jsonData.author.image).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                      "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('created_at')",
                      "    pm.expect(jsonData.created_at).to.be.a('string')",
                      "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "    pm.expect(jsonData).to.have.property('updated_at')",
                      "    pm.expect(jsonData.updated_at).to.be.a('string')",
                      "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"{{$randomWords}}\",\n    \"description\": \"{{$randomLoremSentence}}\",\n    \"body\": \"{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\",\n    \"tags\": [\n        \"{{$randomWord}}\",\n        \"{{$randomWord}}\",\n        \"training\"\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{APIURL}}/articles",
                  "host": ["{{APIURL}}"],
                  "path": ["articles"]
                }
              },
              "response": []
            },
            {
              "name": "Create Training Article 2",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Article is present\", () => {",
                      "    pm.response.to.have.status(200)",
                      "",
                      "    const jsonData = pm.response.json()",
                      "    pm.expect(jsonData).to.have.property('id')",
                      "    pm.expect(jsonData.id).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('title')",
                      "    pm.expect(jsonData.title).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('description')",
                      "    pm.expect(jsonData.description).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('body')",
                      "    pm.expect(jsonData.body).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('tags')",
                      "    pm.expect(jsonData.tags).to.be.an('array')",
                      "    pm.expect(jsonData).to.have.property('favorited')",
                      "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('favorites_count')",
                      "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('author')",
                      "    pm.expect(jsonData.author).to.be.an('object')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                      "    pm.expect(jsonData.author.username).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                      "    pm.expect(jsonData.author.name).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                      "    pm.expect(jsonData.author.bio).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                      "    pm.expect(jsonData.author.image).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                      "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('created_at')",
                      "    pm.expect(jsonData.created_at).to.be.a('string')",
                      "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "    pm.expect(jsonData).to.have.property('updated_at')",
                      "    pm.expect(jsonData.updated_at).to.be.a('string')",
                      "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"{{$randomWords}}\",\n    \"description\": \"{{$randomLoremSentence}}\",\n    \"body\": \"{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\",\n    \"tags\": [\n        \"{{$randomWord}}\",\n        \"{{$randomWord}}\",\n        \"training\"\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{APIURL}}/articles",
                  "host": ["{{APIURL}}"],
                  "path": ["articles"]
                }
              },
              "response": []
            },
            {
              "name": "Favorite Article 1 as News Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Article is present\", () => {",
                      "    pm.response.to.have.status(200)",
                      "",
                      "    const jsonData = pm.response.json()",
                      "    pm.expect(jsonData).to.have.property('id')",
                      "    pm.expect(jsonData.id).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('title')",
                      "    pm.expect(jsonData.title).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('description')",
                      "    pm.expect(jsonData.description).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('body')",
                      "    pm.expect(jsonData.body).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('tags')",
                      "    pm.expect(jsonData.tags).to.be.an('array')",
                      "    pm.expect(jsonData).to.have.property('favorited')",
                      "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                      "    pm.expect(jsonData.favorited).to.equal(true)",
                      "    pm.expect(jsonData).to.have.property('favorites_count')",
                      "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                      "    pm.expect(jsonData.favorites_count).to.be.greaterThan(0)",
                      "    pm.expect(jsonData).to.have.property('author')",
                      "    pm.expect(jsonData.author).to.be.an('object')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                      "    pm.expect(jsonData.author.username).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                      "    pm.expect(jsonData.author.name).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                      "    pm.expect(jsonData.author.bio).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                      "    pm.expect(jsonData.author.image).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                      "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('created_at')",
                      "    pm.expect(jsonData.created_at).to.be.a('string')",
                      "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "    pm.expect(jsonData).to.have.property('updated_at')",
                      "    pm.expect(jsonData.updated_at).to.be.a('string')",
                      "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{APIURL}}/articles/{{ARTICLE_TEST_1_SLUG}}/favorite",
                  "host": ["{{APIURL}}"],
                  "path": ["articles", "{{ARTICLE_TEST_1_SLUG}}", "favorite"]
                }
              },
              "response": []
            },
            {
              "name": "Favorite Article 2 as News Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Article is present\", () => {",
                      "    pm.response.to.have.status(200)",
                      "",
                      "    const jsonData = pm.response.json()",
                      "    pm.expect(jsonData).to.have.property('id')",
                      "    pm.expect(jsonData.id).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('title')",
                      "    pm.expect(jsonData.title).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('description')",
                      "    pm.expect(jsonData.description).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('body')",
                      "    pm.expect(jsonData.body).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('tags')",
                      "    pm.expect(jsonData.tags).to.be.an('array')",
                      "    pm.expect(jsonData).to.have.property('favorited')",
                      "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                      "    pm.expect(jsonData.favorited).to.equal(true)",
                      "    pm.expect(jsonData).to.have.property('favorites_count')",
                      "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                      "    pm.expect(jsonData.favorites_count).to.be.greaterThan(0)",
                      "    pm.expect(jsonData).to.have.property('author')",
                      "    pm.expect(jsonData.author).to.be.an('object')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                      "    pm.expect(jsonData.author.username).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                      "    pm.expect(jsonData.author.name).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                      "    pm.expect(jsonData.author.bio).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                      "    pm.expect(jsonData.author.image).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                      "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('created_at')",
                      "    pm.expect(jsonData.created_at).to.be.a('string')",
                      "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "    pm.expect(jsonData).to.have.property('updated_at')",
                      "    pm.expect(jsonData.updated_at).to.be.a('string')",
                      "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{APIURL}}/articles/{{ARTICLE_TEST_2_SLUG}}/favorite",
                  "host": ["{{APIURL}}"],
                  "path": ["articles", "{{ARTICLE_TEST_2_SLUG}}", "favorite"]
                }
              },
              "response": []
            },
            {
              "name": "Login as Test Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Auth cookie is present\", () => {",
                      "    pm.response.to.have.status(204)",
                      "    pm.expect(pm.cookies.has('session')).to.be.true",
                      "    pm.expect(pm.cookies.has('refreshToken')).to.be.true",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [""],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{EMAIL}}\",\n    \"password\": \"{{PASSWORD}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{APIURL}}/login",
                  "host": ["{{APIURL}}"],
                  "path": ["login"]
                }
              },
              "response": []
            },
            {
              "name": "Follow News Account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"User profile is present\", () => {",
                      "    pm.response.to.have.status(200)",
                      "",
                      "    const jsonData = pm.response.json()",
                      "    pm.expect(jsonData).to.have.property('username')",
                      "    pm.expect(jsonData.username).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('name')",
                      "    pm.expect(jsonData.name).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('bio')",
                      "    pm.expect(jsonData.bio).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('image')",
                      "    pm.expect(jsonData.image).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('following')",
                      "    pm.expect(jsonData.following).to.be.a('boolean')",
                      "    pm.expect(jsonData.following).to.equal(true)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "url": {
                  "raw": "{{APIURL}}/profiles/news_{{USERNAME}}/follow",
                  "host": ["{{APIURL}}"],
                  "path": ["profiles", "news_{{USERNAME}}", "follow"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Create Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Article is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('id')",
                  "    pm.expect(jsonData.id).to.be.a('number')",
                  "    pm.expect(jsonData).to.have.property('title')",
                  "    pm.expect(jsonData.title).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('description')",
                  "    pm.expect(jsonData.description).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('body')",
                  "    pm.expect(jsonData.body).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('tags')",
                  "    pm.expect(jsonData.tags).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('favorited')",
                  "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                  "    pm.expect(jsonData).to.have.property('favorites_count')",
                  "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                  "    pm.expect(jsonData).to.have.property('author')",
                  "    pm.expect(jsonData.author).to.be.an('object')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                  "    pm.expect(jsonData.author.username).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                  "    pm.expect(jsonData.author.name).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                  "    pm.expect(jsonData.author.bio).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                  "    pm.expect(jsonData.author.image).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                  "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                  "    pm.expect(jsonData).to.have.property('created_at')",
                  "    pm.expect(jsonData.created_at).to.be.a('string')",
                  "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "    pm.expect(jsonData).to.have.property('updated_at')",
                  "    pm.expect(jsonData.updated_at).to.be.a('string')",
                  "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "",
                  "    // so we can use it on subsequent requests ",
                  "    pm.collectionVariables.set('ARTICLE_SLUG', jsonData.id)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"{{$randomWords}}\",\n    \"description\": \"{{$randomLoremSentence}}\",\n    \"body\": \"{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\",\n    \"tags\": [\n        \"{{$randomWord}}\",\n        \"{{$randomWord}}\",\n        \"training\"\n    ]\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": ["{{APIURL}}"],
              "path": ["articles"]
            }
          },
          "response": []
        },
        {
          "name": "Article by Slug",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Article is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('id')",
                  "    pm.expect(jsonData.id).to.be.a('number')",
                  "    pm.expect(jsonData).to.have.property('title')",
                  "    pm.expect(jsonData.title).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('description')",
                  "    pm.expect(jsonData.description).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('body')",
                  "    pm.expect(jsonData.body).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('tags')",
                  "    pm.expect(jsonData.tags).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('favorited')",
                  "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                  "    pm.expect(jsonData).to.have.property('favorites_count')",
                  "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                  "    pm.expect(jsonData).to.have.property('author')",
                  "    pm.expect(jsonData.author).to.be.an('object')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                  "    pm.expect(jsonData.author.username).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                  "    pm.expect(jsonData.author.name).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                  "    pm.expect(jsonData.author.bio).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                  "    pm.expect(jsonData.author.image).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                  "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                  "    pm.expect(jsonData).to.have.property('created_at')",
                  "    pm.expect(jsonData.created_at).to.be.a('string')",
                  "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "    pm.expect(jsonData).to.have.property('updated_at')",
                  "    pm.expect(jsonData.updated_at).to.be.a('string')",
                  "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles/{{ARTICLE_SLUG}}",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{ARTICLE_SLUG}}"]
            }
          },
          "response": []
        },
        {
          "name": "All Feed Articles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Articles are present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('articles')",
                  "    pm.expect(jsonData.articles).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('articles_count')",
                  "    pm.expect(jsonData.articles_count).to.be.a('number')",
                  "    pm.expect(jsonData.articles.length).to.equal(jsonData.articles_count)",
                  "",
                  "    const articles = [...jsonData.articles]",
                  "    if (articles.length !== 0) {",
                  "        articles.forEach((article) => {",
                  "            pm.expect(article).to.have.property('id')",
                  "            pm.expect(article.id).to.be.a('number')",
                  "            pm.expect(article).to.have.property('title')",
                  "            pm.expect(article.title).to.be.a('string')",
                  "            pm.expect(article).to.have.property('description')",
                  "            pm.expect(article.description).to.be.a('string')",
                  "            pm.expect(article).to.have.property('body')",
                  "            pm.expect(article.body).to.be.a('string')",
                  "            pm.expect(article).to.have.property('tags')",
                  "            pm.expect(article.tags).to.be.an('array')",
                  "            pm.expect(article).to.have.property('favorited')",
                  "            pm.expect(article.favorited).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('favorites_count')",
                  "            pm.expect(article.favorites_count).to.be.a('number')",
                  "            pm.expect(article).to.have.property('author')",
                  "            pm.expect(article.author).to.be.an('object')",
                  "            pm.expect(article).to.have.deep.nested.property('author.username')",
                  "            pm.expect(article.author.username).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.name')",
                  "            pm.expect(article.author.name).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.bio')",
                  "            pm.expect(article.author.bio).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.image')",
                  "            pm.expect(article.author.image).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.following')",
                  "            pm.expect(article.author.following).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('created_at')",
                  "            pm.expect(article.created_at).to.be.a('string')",
                  "            pm.expect(article.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "            pm.expect(article).to.have.property('updated_at')",
                  "            pm.expect(article.updated_at).to.be.a('string')",
                  "            pm.expect(article.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "        })",
                  "    }",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles/feed",
              "host": ["{{APIURL}}"],
              "path": ["articles", "feed"]
            }
          },
          "response": []
        },
        {
          "name": "All Articles",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Articles are present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('articles')",
                  "    pm.expect(jsonData.articles).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('articles_count')",
                  "    pm.expect(jsonData.articles_count).to.be.a('number')",
                  "    pm.expect(jsonData.articles.length).to.equal(jsonData.articles_count)",
                  "",
                  "    const articles = [...jsonData.articles]",
                  "    if (articles.length !== 0) {",
                  "        articles.forEach((article) => {",
                  "            pm.expect(article).to.have.property('id')",
                  "            pm.expect(article.id).to.be.a('number')",
                  "            pm.expect(article).to.have.property('title')",
                  "            pm.expect(article.title).to.be.a('string')",
                  "            pm.expect(article).to.have.property('description')",
                  "            pm.expect(article.description).to.be.a('string')",
                  "            pm.expect(article).to.have.property('body')",
                  "            pm.expect(article.body).to.be.a('string')",
                  "            pm.expect(article).to.have.property('tags')",
                  "            pm.expect(article.tags).to.be.an('array')",
                  "            pm.expect(article).to.have.property('favorited')",
                  "            pm.expect(article.favorited).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('favorites_count')",
                  "            pm.expect(article.favorites_count).to.be.a('number')",
                  "            pm.expect(article).to.have.property('author')",
                  "            pm.expect(article.author).to.be.an('object')",
                  "            pm.expect(article).to.have.deep.nested.property('author.username')",
                  "            pm.expect(article.author.username).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.name')",
                  "            pm.expect(article.author.name).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.bio')",
                  "            pm.expect(article.author.bio).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.image')",
                  "            pm.expect(article.author.image).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.following')",
                  "            pm.expect(article.author.following).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('created_at')",
                  "            pm.expect(article.created_at).to.be.a('string')",
                  "            pm.expect(article.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "            pm.expect(article).to.have.property('updated_at')",
                  "            pm.expect(article.updated_at).to.be.a('string')",
                  "            pm.expect(article.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "        })",
                  "    }",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableCookies": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": ["{{APIURL}}"],
              "path": ["articles"]
            }
          },
          "response": []
        },
        {
          "name": "All Articles with Auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Articles are present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('articles')",
                  "    pm.expect(jsonData.articles).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('articles_count')",
                  "    pm.expect(jsonData.articles_count).to.be.a('number')",
                  "    pm.expect(jsonData.articles.length).to.equal(jsonData.articles_count)",
                  "",
                  "    const articles = [...jsonData.articles]",
                  "    if (articles.length !== 0) {",
                  "        articles.forEach((article) => {",
                  "            pm.expect(article).to.have.property('id')",
                  "            pm.expect(article.id).to.be.a('number')",
                  "            pm.expect(article).to.have.property('title')",
                  "            pm.expect(article.title).to.be.a('string')",
                  "            pm.expect(article).to.have.property('description')",
                  "            pm.expect(article.description).to.be.a('string')",
                  "            pm.expect(article).to.have.property('body')",
                  "            pm.expect(article.body).to.be.a('string')",
                  "            pm.expect(article).to.have.property('tags')",
                  "            pm.expect(article.tags).to.be.an('array')",
                  "            pm.expect(article).to.have.property('favorited')",
                  "            pm.expect(article.favorited).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('favorites_count')",
                  "            pm.expect(article.favorites_count).to.be.a('number')",
                  "            pm.expect(article).to.have.property('author')",
                  "            pm.expect(article.author).to.be.an('object')",
                  "            pm.expect(article).to.have.deep.nested.property('author.username')",
                  "            pm.expect(article.author.username).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.name')",
                  "            pm.expect(article.author.name).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.bio')",
                  "            pm.expect(article.author.bio).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.image')",
                  "            pm.expect(article.author.image).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.following')",
                  "            pm.expect(article.author.following).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('created_at')",
                  "            pm.expect(article.created_at).to.be.a('string')",
                  "            pm.expect(article.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "            pm.expect(article).to.have.property('updated_at')",
                  "            pm.expect(article.updated_at).to.be.a('string')",
                  "            pm.expect(article.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "        })",
                  "    }",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles",
              "host": ["{{APIURL}}"],
              "path": ["articles"]
            }
          },
          "response": []
        },
        {
          "name": "All Articles by Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Articles are present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('articles')",
                  "    pm.expect(jsonData.articles).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('articles_count')",
                  "    pm.expect(jsonData.articles_count).to.be.a('number')",
                  "    pm.expect(jsonData.articles.length).to.equal(jsonData.articles_count)",
                  "",
                  "    const articles = [...jsonData.articles]",
                  "    if (articles.length !== 0) {",
                  "        articles.forEach((article) => {",
                  "            pm.expect(article).to.have.property('id')",
                  "            pm.expect(article.id).to.be.a('number')",
                  "            pm.expect(article).to.have.property('title')",
                  "            pm.expect(article.title).to.be.a('string')",
                  "            pm.expect(article).to.have.property('description')",
                  "            pm.expect(article.description).to.be.a('string')",
                  "            pm.expect(article).to.have.property('body')",
                  "            pm.expect(article.body).to.be.a('string')",
                  "            pm.expect(article).to.have.property('tags')",
                  "            pm.expect(article.tags).to.be.an('array')",
                  "            pm.expect(article).to.have.property('favorited')",
                  "            pm.expect(article.favorited).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('favorites_count')",
                  "            pm.expect(article.favorites_count).to.be.a('number')",
                  "            pm.expect(article).to.have.property('author')",
                  "            pm.expect(article.author).to.be.an('object')",
                  "            pm.expect(article).to.have.deep.nested.property('author.username')",
                  "            pm.expect(article.author.username).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.name')",
                  "            pm.expect(article.author.name).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.bio')",
                  "            pm.expect(article.author.bio).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.image')",
                  "            pm.expect(article.author.image).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.following')",
                  "            pm.expect(article.author.following).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('created_at')",
                  "            pm.expect(article.created_at).to.be.a('string')",
                  "            pm.expect(article.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "            pm.expect(article).to.have.property('updated_at')",
                  "            pm.expect(article.updated_at).to.be.a('string')",
                  "            pm.expect(article.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "        })",
                  "    }",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableCookies": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles?username={{USERNAME}}",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "username",
                  "value": "{{USERNAME}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "All Articles by Author with Auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Articles are present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('articles')",
                  "    pm.expect(jsonData.articles).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('articles_count')",
                  "    pm.expect(jsonData.articles_count).to.be.a('number')",
                  "    pm.expect(jsonData.articles.length).to.equal(jsonData.articles_count)",
                  "",
                  "    const articles = [...jsonData.articles]",
                  "    if (articles.length !== 0) {",
                  "        articles.forEach((article) => {",
                  "            pm.expect(article).to.have.property('id')",
                  "            pm.expect(article.id).to.be.a('number')",
                  "            pm.expect(article).to.have.property('title')",
                  "            pm.expect(article.title).to.be.a('string')",
                  "            pm.expect(article).to.have.property('description')",
                  "            pm.expect(article.description).to.be.a('string')",
                  "            pm.expect(article).to.have.property('body')",
                  "            pm.expect(article.body).to.be.a('string')",
                  "            pm.expect(article).to.have.property('tags')",
                  "            pm.expect(article.tags).to.be.an('array')",
                  "            pm.expect(article).to.have.property('favorited')",
                  "            pm.expect(article.favorited).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('favorites_count')",
                  "            pm.expect(article.favorites_count).to.be.a('number')",
                  "            pm.expect(article).to.have.property('author')",
                  "            pm.expect(article.author).to.be.an('object')",
                  "            pm.expect(article).to.have.deep.nested.property('author.username')",
                  "            pm.expect(article.author.username).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.name')",
                  "            pm.expect(article.author.name).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.bio')",
                  "            pm.expect(article.author.bio).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.image')",
                  "            pm.expect(article.author.image).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.following')",
                  "            pm.expect(article.author.following).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('created_at')",
                  "            pm.expect(article.created_at).to.be.a('string')",
                  "            pm.expect(article.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "            pm.expect(article).to.have.property('updated_at')",
                  "            pm.expect(article.updated_at).to.be.a('string')",
                  "            pm.expect(article.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "        })",
                  "    }",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles?username={{USERNAME}}",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "username",
                  "value": "{{USERNAME}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "All Articles Favorited by User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Articles are present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('articles')",
                  "    pm.expect(jsonData.articles).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('articles_count')",
                  "    pm.expect(jsonData.articles_count).to.be.a('number')",
                  "    pm.expect(jsonData.articles.length).to.equal(jsonData.articles_count)",
                  "",
                  "    const articles = [...jsonData.articles]",
                  "    if (articles.length !== 0) {",
                  "        articles.forEach((article) => {",
                  "            pm.expect(article).to.have.property('id')",
                  "            pm.expect(article.id).to.be.a('number')",
                  "            pm.expect(article).to.have.property('title')",
                  "            pm.expect(article.title).to.be.a('string')",
                  "            pm.expect(article).to.have.property('description')",
                  "            pm.expect(article.description).to.be.a('string')",
                  "            pm.expect(article).to.have.property('body')",
                  "            pm.expect(article.body).to.be.a('string')",
                  "            pm.expect(article).to.have.property('tags')",
                  "            pm.expect(article.tags).to.be.an('array')",
                  "            pm.expect(article).to.have.property('favorited')",
                  "            pm.expect(article.favorited).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('favorites_count')",
                  "            pm.expect(article.favorites_count).to.be.a('number')",
                  "            pm.expect(article).to.have.property('author')",
                  "            pm.expect(article.author).to.be.an('object')",
                  "            pm.expect(article).to.have.deep.nested.property('author.username')",
                  "            pm.expect(article.author.username).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.name')",
                  "            pm.expect(article.author.name).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.bio')",
                  "            pm.expect(article.author.bio).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.image')",
                  "            pm.expect(article.author.image).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.following')",
                  "            pm.expect(article.author.following).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('created_at')",
                  "            pm.expect(article.created_at).to.be.a('string')",
                  "            pm.expect(article.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "            pm.expect(article).to.have.property('updated_at')",
                  "            pm.expect(article.updated_at).to.be.a('string')",
                  "            pm.expect(article.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "        })",
                  "    }",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableCookies": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles?favorited=news_{{USERNAME}}",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "favorited",
                  "value": "news_{{USERNAME}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "All Articles Favorited by User with Auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Articles are present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('articles')",
                  "    pm.expect(jsonData.articles).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('articles_count')",
                  "    pm.expect(jsonData.articles_count).to.be.a('number')",
                  "    pm.expect(jsonData.articles.length).to.equal(jsonData.articles_count)",
                  "",
                  "    const articles = [...jsonData.articles]",
                  "    if (articles.length !== 0) {",
                  "        articles.forEach((article) => {",
                  "            pm.expect(article).to.have.property('id')",
                  "            pm.expect(article.id).to.be.a('number')",
                  "            pm.expect(article).to.have.property('title')",
                  "            pm.expect(article.title).to.be.a('string')",
                  "            pm.expect(article).to.have.property('description')",
                  "            pm.expect(article.description).to.be.a('string')",
                  "            pm.expect(article).to.have.property('body')",
                  "            pm.expect(article.body).to.be.a('string')",
                  "            pm.expect(article).to.have.property('tags')",
                  "            pm.expect(article.tags).to.be.an('array')",
                  "            pm.expect(article).to.have.property('favorited')",
                  "            pm.expect(article.favorited).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('favorites_count')",
                  "            pm.expect(article.favorites_count).to.be.a('number')",
                  "            pm.expect(article).to.have.property('author')",
                  "            pm.expect(article.author).to.be.an('object')",
                  "            pm.expect(article).to.have.deep.nested.property('author.username')",
                  "            pm.expect(article.author.username).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.name')",
                  "            pm.expect(article.author.name).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.bio')",
                  "            pm.expect(article.author.bio).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.image')",
                  "            pm.expect(article.author.image).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.following')",
                  "            pm.expect(article.author.following).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('created_at')",
                  "            pm.expect(article.created_at).to.be.a('string')",
                  "            pm.expect(article.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "            pm.expect(article).to.have.property('updated_at')",
                  "            pm.expect(article.updated_at).to.be.a('string')",
                  "            pm.expect(article.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "        })",
                  "    }",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles?favorited=news_{{USERNAME}}",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "favorited",
                  "value": "news_{{USERNAME}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "All Articles by Tag",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Articles are present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('articles')",
                  "    pm.expect(jsonData.articles).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('articles_count')",
                  "    pm.expect(jsonData.articles_count).to.be.a('number')",
                  "    pm.expect(jsonData.articles.length).to.equal(jsonData.articles_count)",
                  "",
                  "    const articles = [...jsonData.articles]",
                  "    if (articles.length !== 0) {",
                  "        articles.forEach((article) => {",
                  "            pm.expect(article).to.have.property('id')",
                  "            pm.expect(article.id).to.be.a('number')",
                  "            pm.expect(article).to.have.property('title')",
                  "            pm.expect(article.title).to.be.a('string')",
                  "            pm.expect(article).to.have.property('description')",
                  "            pm.expect(article.description).to.be.a('string')",
                  "            pm.expect(article).to.have.property('body')",
                  "            pm.expect(article.body).to.be.a('string')",
                  "            pm.expect(article).to.have.property('tags')",
                  "            pm.expect(article.tags).to.be.an('array')",
                  "            pm.expect(article).to.have.property('favorited')",
                  "            pm.expect(article.favorited).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('favorites_count')",
                  "            pm.expect(article.favorites_count).to.be.a('number')",
                  "            pm.expect(article).to.have.property('author')",
                  "            pm.expect(article.author).to.be.an('object')",
                  "            pm.expect(article).to.have.deep.nested.property('author.username')",
                  "            pm.expect(article.author.username).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.name')",
                  "            pm.expect(article.author.name).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.bio')",
                  "            pm.expect(article.author.bio).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.image')",
                  "            pm.expect(article.author.image).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.following')",
                  "            pm.expect(article.author.following).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('created_at')",
                  "            pm.expect(article.created_at).to.be.a('string')",
                  "            pm.expect(article.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "            pm.expect(article).to.have.property('updated_at')",
                  "            pm.expect(article.updated_at).to.be.a('string')",
                  "            pm.expect(article.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "        })",
                  "    }",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableCookies": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles?tag=training",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "tag",
                  "value": "training"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "All Articles by Tag with Auth",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Articles are present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('articles')",
                  "    pm.expect(jsonData.articles).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('articles_count')",
                  "    pm.expect(jsonData.articles_count).to.be.a('number')",
                  "    pm.expect(jsonData.articles.length).to.equal(jsonData.articles_count)",
                  "",
                  "    const articles = [...jsonData.articles]",
                  "    if (articles.length !== 0) {",
                  "        articles.forEach((article) => {",
                  "            pm.expect(article).to.have.property('id')",
                  "            pm.expect(article.id).to.be.a('number')",
                  "            pm.expect(article).to.have.property('title')",
                  "            pm.expect(article.title).to.be.a('string')",
                  "            pm.expect(article).to.have.property('description')",
                  "            pm.expect(article.description).to.be.a('string')",
                  "            pm.expect(article).to.have.property('body')",
                  "            pm.expect(article.body).to.be.a('string')",
                  "            pm.expect(article).to.have.property('tags')",
                  "            pm.expect(article.tags).to.be.an('array')",
                  "            pm.expect(article).to.have.property('favorited')",
                  "            pm.expect(article.favorited).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('favorites_count')",
                  "            pm.expect(article.favorites_count).to.be.a('number')",
                  "            pm.expect(article).to.have.property('author')",
                  "            pm.expect(article.author).to.be.an('object')",
                  "            pm.expect(article).to.have.deep.nested.property('author.username')",
                  "            pm.expect(article.author.username).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.name')",
                  "            pm.expect(article.author.name).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.bio')",
                  "            pm.expect(article.author.bio).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.image')",
                  "            pm.expect(article.author.image).to.be.a('string')",
                  "            pm.expect(article).to.have.deep.nested.property('author.following')",
                  "            pm.expect(article.author.following).to.be.a('boolean')",
                  "            pm.expect(article).to.have.property('created_at')",
                  "            pm.expect(article.created_at).to.be.a('string')",
                  "            pm.expect(article.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "            pm.expect(article).to.have.property('updated_at')",
                  "            pm.expect(article.updated_at).to.be.a('string')",
                  "            pm.expect(article.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "        })",
                  "    }",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles?tag=training",
              "host": ["{{APIURL}}"],
              "path": ["articles"],
              "query": [
                {
                  "key": "tag",
                  "value": "training"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Article is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('id')",
                  "    pm.expect(jsonData.id).to.be.a('number')",
                  "    pm.expect(jsonData).to.have.property('title')",
                  "    pm.expect(jsonData.title).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('description')",
                  "    pm.expect(jsonData.description).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('body')",
                  "    pm.expect(jsonData.body).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('tags')",
                  "    pm.expect(jsonData.tags).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('favorited')",
                  "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                  "    pm.expect(jsonData).to.have.property('favorites_count')",
                  "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                  "    pm.expect(jsonData).to.have.property('author')",
                  "    pm.expect(jsonData.author).to.be.an('object')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                  "    pm.expect(jsonData.author.username).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                  "    pm.expect(jsonData.author.name).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                  "    pm.expect(jsonData.author.bio).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                  "    pm.expect(jsonData.author.image).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                  "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                  "    pm.expect(jsonData).to.have.property('created_at')",
                  "    pm.expect(jsonData.created_at).to.be.a('string')",
                  "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "    pm.expect(jsonData).to.have.property('updated_at')",
                  "    pm.expect(jsonData.updated_at).to.be.a('string')",
                  "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"{{$randomWords}}\",\n    \"description\": \"{{$randomLoremSentence}}\",\n    \"body\": \"{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{ARTICLE_SLUG}}",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{ARTICLE_SLUG}}"]
            }
          },
          "response": []
        },
        {
          "name": "Favorite Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Article is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('id')",
                  "    pm.expect(jsonData.id).to.be.a('number')",
                  "    pm.expect(jsonData).to.have.property('title')",
                  "    pm.expect(jsonData.title).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('description')",
                  "    pm.expect(jsonData.description).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('body')",
                  "    pm.expect(jsonData.body).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('tags')",
                  "    pm.expect(jsonData.tags).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('favorited')",
                  "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                  "    pm.expect(jsonData.favorited).to.equal(true)",
                  "    pm.expect(jsonData).to.have.property('favorites_count')",
                  "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                  "    pm.expect(jsonData.favorites_count).to.be.greaterThan(0)",
                  "    pm.expect(jsonData).to.have.property('author')",
                  "    pm.expect(jsonData.author).to.be.an('object')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                  "    pm.expect(jsonData.author.username).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                  "    pm.expect(jsonData.author.name).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                  "    pm.expect(jsonData.author.bio).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                  "    pm.expect(jsonData.author.image).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                  "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                  "    pm.expect(jsonData).to.have.property('created_at')",
                  "    pm.expect(jsonData.created_at).to.be.a('string')",
                  "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "    pm.expect(jsonData).to.have.property('updated_at')",
                  "    pm.expect(jsonData.updated_at).to.be.a('string')",
                  "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles/{{ARTICLE_SLUG}}/favorite",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{ARTICLE_SLUG}}", "favorite"]
            }
          },
          "response": []
        },
        {
          "name": "Unfavorite Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Article is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('id')",
                  "    pm.expect(jsonData.id).to.be.a('number')",
                  "    pm.expect(jsonData).to.have.property('title')",
                  "    pm.expect(jsonData.title).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('description')",
                  "    pm.expect(jsonData.description).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('body')",
                  "    pm.expect(jsonData.body).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('tags')",
                  "    pm.expect(jsonData.tags).to.be.an('array')",
                  "    pm.expect(jsonData).to.have.property('favorited')",
                  "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                  "    pm.expect(jsonData.favorited).to.equal(false)",
                  "    pm.expect(jsonData).to.have.property('favorites_count')",
                  "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                  "    pm.expect(jsonData).to.have.property('author')",
                  "    pm.expect(jsonData.author).to.be.an('object')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                  "    pm.expect(jsonData.author.username).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                  "    pm.expect(jsonData.author.name).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                  "    pm.expect(jsonData.author.bio).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                  "    pm.expect(jsonData.author.image).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                  "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                  "    pm.expect(jsonData).to.have.property('created_at')",
                  "    pm.expect(jsonData.created_at).to.be.a('string')",
                  "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "    pm.expect(jsonData).to.have.property('updated_at')",
                  "    pm.expect(jsonData.updated_at).to.be.a('string')",
                  "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles/{{ARTICLE_SLUG}}/favorite",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{ARTICLE_SLUG}}", "favorite"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Delete successfully\", () => {",
                  "    pm.response.to.have.status(204)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles/{{ARTICLE_SLUG}}",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{ARTICLE_SLUG}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Comments",
      "item": [
        {
          "name": "Prepare Data",
          "item": [
            {
              "name": "Create Article 3",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Article is present\", () => {",
                      "    pm.response.to.have.status(200)",
                      "",
                      "    const jsonData = pm.response.json()",
                      "    pm.expect(jsonData).to.have.property('id')",
                      "    pm.expect(jsonData.id).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('title')",
                      "    pm.expect(jsonData.title).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('description')",
                      "    pm.expect(jsonData.description).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('body')",
                      "    pm.expect(jsonData.body).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.property('tags')",
                      "    pm.expect(jsonData.tags).to.be.an('array')",
                      "    pm.expect(jsonData).to.have.property('favorited')",
                      "    pm.expect(jsonData.favorited).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('favorites_count')",
                      "    pm.expect(jsonData.favorites_count).to.be.a('number')",
                      "    pm.expect(jsonData).to.have.property('author')",
                      "    pm.expect(jsonData.author).to.be.an('object')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                      "    pm.expect(jsonData.author.username).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                      "    pm.expect(jsonData.author.name).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                      "    pm.expect(jsonData.author.bio).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                      "    pm.expect(jsonData.author.image).to.be.a('string')",
                      "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                      "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                      "    pm.expect(jsonData).to.have.property('created_at')",
                      "    pm.expect(jsonData.created_at).to.be.a('string')",
                      "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "    pm.expect(jsonData).to.have.property('updated_at')",
                      "    pm.expect(jsonData.updated_at).to.be.a('string')",
                      "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                      "",
                      "    // so we can use it on subsequent requests ",
                      "    pm.collectionVariables.set('ARTICLE_TEST_3_SLUG', jsonData.id)",
                      "})",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"title\": \"{{$randomWords}}\",\n    \"description\": \"{{$randomLoremSentence}}\",\n    \"body\": \"{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\\\\n{{$randomLoremSentence}}\",\n    \"tags\": [\n        \"{{$randomWord}}\",\n        \"{{$randomWord}}\",\n        \"dnd\"\n    ]\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{APIURL}}/articles",
                  "host": ["{{APIURL}}"],
                  "path": ["articles"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Create Comment for Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Comment is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('id')",
                  "    pm.expect(jsonData.id).to.be.a('number')",
                  "    pm.expect(jsonData).to.have.property('body')",
                  "    pm.expect(jsonData.body).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.property('author')",
                  "    pm.expect(jsonData.author).to.be.an('object')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.username')",
                  "    pm.expect(jsonData.author.username).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.name')",
                  "    pm.expect(jsonData.author.name).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.bio')",
                  "    pm.expect(jsonData.author.bio).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.image')",
                  "    pm.expect(jsonData.author.image).to.be.a('string')",
                  "    pm.expect(jsonData).to.have.deep.nested.property('author.following')",
                  "    pm.expect(jsonData.author.following).to.be.a('boolean')",
                  "    pm.expect(jsonData).to.have.property('created_at')",
                  "    pm.expect(jsonData.created_at).to.be.a('string')",
                  "    pm.expect(jsonData.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "    pm.expect(jsonData).to.have.property('updated_at')",
                  "    pm.expect(jsonData.updated_at).to.be.a('string')",
                  "    pm.expect(jsonData.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "",
                  "    // so we can use it on subsequent requests ",
                  "    pm.collectionVariables.set('COMMENT_ID', jsonData.id)",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"body\": \"{{$randomLoremSentence}}\\\\nThank you so much!\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{APIURL}}/articles/{{ARTICLE_TEST_3_SLUG}}/comments",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{ARTICLE_TEST_3_SLUG}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "All Comments of Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Comments are present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonData = pm.response.json()",
                  "    pm.expect(jsonData).to.have.property('comments')",
                  "    pm.expect(jsonData.comments).to.be.an('array')",
                  "",
                  "    const comments = [...jsonData.comments]",
                  "    if (comments.length !== 0) {",
                  "        comments.forEach((comment) => {",
                  "            pm.expect(comment).to.have.property('id')",
                  "            pm.expect(comment.id).to.be.a('number')",
                  "            pm.expect(comment).to.have.property('body')",
                  "            pm.expect(comment.body).to.be.a('string')",
                  "            pm.expect(comment).to.have.property('author')",
                  "            pm.expect(comment.author).to.be.an('object')",
                  "            pm.expect(comment).to.have.deep.nested.property('author.username')",
                  "            pm.expect(comment.author.username).to.be.a('string')",
                  "            pm.expect(comment).to.have.deep.nested.property('author.name')",
                  "            pm.expect(comment.author.name).to.be.a('string')",
                  "            pm.expect(comment).to.have.deep.nested.property('author.bio')",
                  "            pm.expect(comment.author.bio).to.be.a('string')",
                  "            pm.expect(comment).to.have.deep.nested.property('author.image')",
                  "            pm.expect(comment.author.image).to.be.a('string')",
                  "            pm.expect(comment).to.have.deep.nested.property('author.following')",
                  "            pm.expect(comment.author.following).to.be.a('boolean')",
                  "            pm.expect(comment).to.have.property('created_at')",
                  "            pm.expect(comment.created_at).to.be.a('string')",
                  "            pm.expect(comment.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "            pm.expect(comment).to.have.property('updated_at')",
                  "            pm.expect(comment.updated_at).to.be.a('string')",
                  "            pm.expect(comment.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z(\\d{2}:\\d{2})?$/)",
                  "        })",
                  "    }",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles/{{ARTICLE_TEST_3_SLUG}}/comments",
              "host": ["{{APIURL}}"],
              "path": ["articles", "{{ARTICLE_TEST_3_SLUG}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Comment from Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Delete successfully\", () => {",
                  "    pm.response.to.have.status(204)",
                  "})"
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/articles/{{ARTICLE_TEST_3_SLUG}}/comments/{{COMMENT_ID}}",
              "host": ["{{APIURL}}"],
              "path": [
                "articles",
                "{{ARTICLE_TEST_3_SLUG}}",
                "comments",
                "{{COMMENT_ID}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Tags",
      "item": [
        {
          "name": "All Tags",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Tags array is present\", () => {",
                  "    pm.response.to.have.status(200)",
                  "",
                  "    const jsonBody = pm.response.json()",
                  "    pm.expect(jsonBody).to.have.property('tags')",
                  "    pm.expect(jsonBody.tags).to.be.an('array')",
                  "",
                  "    const tags = [...jsonBody.tags]",
                  "    if (tags.length !== 0) {",
                  "        tags.forEach((tag) => {",
                  "            pm.expect(tag).to.be.a('string')",
                  "        })",
                  "    }",
                  "})",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{APIURL}}/tags",
              "host": ["{{APIURL}}"],
              "path": ["tags"]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [""]
      }
    }
  ]
}
